'use client';

import { Box, Cylinder, Line, OrbitControls, Sphere } from '@react-three/drei';
import { Canvas } from '@react-three/fiber';
import { memo, useEffect, useRef, useState } from 'react';
import { useInView } from 'react-intersection-observer';
import * as THREE from 'three';

/**
 * Timeline marker
 */
function TimelineMarker({ position, color }: {
  position: [number, number, number];
  color: string;
}) {
  return (
    <Sphere position={position} args={[0.15, 16, 16]}>
      <meshStandardMaterial color={color} emissive={color} emissiveIntensity={0.5} />
    </Sphere>
  );
}

/**
 * SSG visualization (top)
 */
function SSGVisualization({ active }: { active: boolean }) {
  const groupRef = useRef<THREE.Group>(null);
  const dataRef = useRef<THREE.Mesh>(null);

  useEffect(() => {
    const prefersReducedMotion = typeof window !== 'undefined'
      ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
      : false;
    if (prefersReducedMotion || !active) return;

    let animationFrameId: number;
    let progress = 0;

    const animate = () => {
      if (dataRef.current) {
        progress += 0.02;
        const x = -4 + (progress % 1) * 8;
        dataRef.current.position.x = x;
      }
      animationFrameId = requestAnimationFrame(animate);
    };
    animate();

    return () => cancelAnimationFrame(animationFrameId);
  }, [active]);

  return (
    <group ref={groupRef} position={[0, 2, 0]}>
      {/* Build time */}
      <Box position={[-4, 0, 0]} args={[1, 0.8, 0.8]}>
        <meshStandardMaterial color="#3b82f6" metalness={0.4} roughness={0.3} />
      </Box>

      {/* CDN */}
      <Cylinder position={[0, 0, 0]} args={[0.5, 0.5, 0.8, 32]}>
        <meshStandardMaterial color="#10b981" metalness={0.5} roughness={0.3} />
      </Cylinder>

      {/* Browser */}
      <Box position={[4, 0, 0]} args={[0.8, 0.8, 0.8]}>
        <meshStandardMaterial color="#8b5cf6" metalness={0.3} roughness={0.4} />
      </Box>

      {/* Data flow indicator */}
      {active && (
        <Sphere ref={dataRef} position={[-4, 0, 0]} args={[0.2, 16, 16]}>
          <meshStandardMaterial color="#fbbf24" emissive="#fbbf24" emissiveIntensity={0.8} />
        </Sphere>
      )}

      {/* Connection lines */}
      <Line
        points={[
          new THREE.Vector3(-4, 0, 0),
          new THREE.Vector3(0, 0, 0)
        ]}
        color={active ? '#60a5fa' : '#4b5563'}
        lineWidth={2}
      />
      <Line
        points={[
          new THREE.Vector3(0, 0, 0),
          new THREE.Vector3(4, 0, 0)
        ]}
        color={active ? '#10b981' : '#4b5563'}
        lineWidth={2}
      />

      {/* Timeline markers */}
      <TimelineMarker position={[-4, -1, 0]} label="Build" color="#3b82f6" />
      <TimelineMarker position={[4, -1, 0]} label="Fast" color="#10b981" />
    </group>
  );
}

/**
 * SSR visualization (bottom)
 */
function SSRVisualization({ active }: { active: boolean }) {
  const groupRef = useRef<THREE.Group>(null);
  const dataRef = useRef<THREE.Mesh>(null);

  useEffect(() => {
    const prefersReducedMotion = typeof window !== 'undefined'
      ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
      : false;
    if (prefersReducedMotion || !active) return;

    let animationFrameId: number;
    let progress = 0;

    const animate = () => {
      if (dataRef.current) {
        progress += 0.015;
        const x = -4 + (progress % 1) * 8;
        dataRef.current.position.x = x;
      }
      animationFrameId = requestAnimationFrame(animate);
    };
    animate();

    return () => cancelAnimationFrame(animationFrameId);
  }, [active]);

  return (
    <group ref={groupRef} position={[0, -2, 0]}>
      {/* Database */}
      <Cylinder position={[-4, 0, 0]} args={[0.4, 0.4, 0.8, 32]} rotation={[Math.PI / 2, 0, 0]}>
        <meshStandardMaterial color="#ec4899" metalness={0.5} roughness={0.2} />
      </Cylinder>

      {/* Server */}
      <Box position={[0, 0, 0]} args={[1, 0.8, 0.8]}>
        <meshStandardMaterial color="#f59e0b" metalness={0.4} roughness={0.3} />
      </Box>

      {/* Browser */}
      <Box position={[4, 0, 0]} args={[0.8, 0.8, 0.8]}>
        <meshStandardMaterial color="#8b5cf6" metalness={0.3} roughness={0.4} />
      </Box>

      {/* Data flow indicator */}
      {active && (
        <Sphere ref={dataRef} position={[-4, 0, 0]} args={[0.2, 16, 16]}>
          <meshStandardMaterial color="#fbbf24" emissive="#fbbf24" emissiveIntensity={0.8} />
        </Sphere>
      )}

      {/* Connection lines */}
      <Line
        points={[
          new THREE.Vector3(-4, 0, 0),
          new THREE.Vector3(0, 0, 0)
        ]}
        color={active ? '#ec4899' : '#4b5563'}
        lineWidth={2}
      />
      <Line
        points={[
          new THREE.Vector3(0, 0, 0),
          new THREE.Vector3(4, 0, 0)
        ]}
        color={active ? '#f59e0b' : '#4b5563'}
        lineWidth={2}
      />

      {/* Timeline markers */}
      <TimelineMarker position={[-4, -1, 0]} label="Request" color="#ec4899" />
      <TimelineMarker position={[0, -1, 0]} label="Generate" color="#f59e0b" />
      <TimelineMarker position={[4, -1, 0]} label="Fresh" color="#10b981" />
    </group>
  );
}

/**
 * Main scene content
 */
const SceneContent = memo(function SceneContent({ showSSG }: { showSSG: boolean }) {
  return (
    <>
      <ambientLight intensity={0.5} />
      <pointLight position={[10, 10, 10]} intensity={1} />
      <spotLight position={[-10, 10, 5]} angle={0.3} penumbra={1} intensity={0.5} />

      <SSGVisualization active={showSSG} />
      <SSRVisualization active={!showSSG} />

      {/* Divider line */}
      <Line
        points={[
          new THREE.Vector3(-5, 0, 0),
          new THREE.Vector3(5, 0, 0)
        ]}
        color="#6b7280"
        lineWidth={1}
        dashed
        dashSize={0.2}
        gapSize={0.1}
      />

      <OrbitControls
        enableZoom={true}
        enablePan={false}
        maxPolarAngle={Math.PI / 1.5}
        minPolarAngle={Math.PI / 3}
        autoRotate={false}
      />
    </>
  );
});

/**
 * Fallback content
 */
function FallbackContent() {
  return (
    <div className="flex h-full w-full items-center justify-center bg-gradient-to-br from-blue-50 to-orange-50 dark:from-blue-950 dark:to-orange-950">
      <div className="grid grid-cols-2 gap-8 px-4 max-w-4xl">
        <div className="text-center">
          <div className="text-5xl mb-3">âš¡</div>
          <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-3">
            Static Site Generation
          </h3>
          <div className="space-y-2 text-sm">
            <div className="bg-blue-100 dark:bg-blue-900/30 p-2 rounded">
              <span className="font-semibold">Build time:</span> Pre-rendered
            </div>
            <div className="bg-green-100 dark:bg-green-900/30 p-2 rounded">
              <span className="font-semibold">Delivery:</span> CDN cached
            </div>
            <div className="bg-purple-100 dark:bg-purple-900/30 p-2 rounded">
              <span className="font-semibold">Speed:</span> Instant load
            </div>
            <div className="bg-yellow-100 dark:bg-yellow-900/30 p-2 rounded">
              <span className="font-semibold">Data:</span> Build-time only
            </div>
          </div>
        </div>

        <div className="text-center">
          <div className="text-5xl mb-3">ðŸ”„</div>
          <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-3">
            Server-Side Rendering
          </h3>
          <div className="space-y-2 text-sm">
            <div className="bg-pink-100 dark:bg-pink-900/30 p-2 rounded">
              <span className="font-semibold">Request time:</span> On-demand
            </div>
            <div className="bg-orange-100 dark:bg-orange-900/30 p-2 rounded">
              <span className="font-semibold">Delivery:</span> Server rendered
            </div>
            <div className="bg-blue-100 dark:bg-blue-900/30 p-2 rounded">
              <span className="font-semibold">Speed:</span> Per request
            </div>
            <div className="bg-green-100 dark:bg-green-900/30 p-2 rounded">
              <span className="font-semibold">Data:</span> Always fresh
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

/**
 * SSGvsSSRScene: Rendering strategies comparison
 *
 * Features:
 * - Timeline visualization
 * - Data flow animations
 * - Build vs runtime comparison
 * - Performance implications
 */
export default function SSGvsSSRScene() {
  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.1,
    rootMargin: '200px'
  });

  const [hasWebGL, setHasWebGL] = useState(true);
  const [isLoaded, setIsLoaded] = useState(false);
  const [showSSG, setShowSSG] = useState(true);

  useEffect(() => {
    const canvas = document.createElement('canvas');
    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    setHasWebGL(!!gl);
    setIsLoaded(true);
  }, []);

  // Alternate between SSG and SSR
  useEffect(() => {
    if (!inView || !hasWebGL) return;

    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    if (prefersReducedMotion) return;

    const interval = setInterval(() => {
      setShowSSG(prev => !prev);
    }, 4000);

    return () => clearInterval(interval);
  }, [inView, hasWebGL]);

  if (!isLoaded) {
    return (
      <div ref={ref} className="w-full h-[400px] rounded-lg overflow-hidden flex items-center justify-center bg-gray-50 dark:bg-gray-800">
        <div className="animate-pulse text-gray-500">Loading...</div>
      </div>
    );
  }

  if (!hasWebGL) {
    return (
      <div ref={ref} className="w-full h-[400px] rounded-lg overflow-hidden">
        <FallbackContent />
      </div>
    );
  }

  return (
    <div ref={ref} className="w-full h-[400px] rounded-lg overflow-hidden">
      {inView && (
        <Canvas
          camera={{ position: [0, 0, 10], fov: 50 }}
          gl={{ antialias: true, alpha: true, powerPreference: 'high-performance' }}
          dpr={Math.min(window.devicePixelRatio, 2)}
        >
          <color attach="background" args={['#0f172a']} />
          <fog attach="fog" args={['#0f172a', 8, 18]} />
          <SceneContent showSSG={showSSG} />
        </Canvas>
      )}
    </div>
  );
}
