'use client';

import { Canvas } from '@react-three/fiber';
import { OrbitControls, Box, Line } from '@react-three/drei';
import { memo, useEffect, useRef, useState } from 'react';
import { useInView } from 'react-intersection-observer';
import * as THREE from 'three';

interface TreeNode {
  id: string;
  label: string;
  role: string;
  position: [number, number, number];
  color: string;
  children?: TreeNode[];
}

/**
 * Individual tree node
 */
function AccessibilityNode({ node, highlight }: { node: TreeNode; highlight: boolean }) {
  const meshRef = useRef<THREE.Mesh>(null);

  useEffect(() => {
    const prefersReducedMotion = typeof window !== 'undefined'
      ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
      : false;
    if (prefersReducedMotion || !highlight) return;

    let animationFrameId: number;
    const animate = () => {
      if (meshRef.current) {
        const scale = 1 + Math.sin(Date.now() * 0.003) * 0.1;
        meshRef.current.scale.set(scale, scale, scale);
      }
      animationFrameId = requestAnimationFrame(animate);
    };
    animate();

    return () => cancelAnimationFrame(animationFrameId);
  }, [highlight]);

  return (
    <Box ref={meshRef} position={node.position} args={[0.6, 0.6, 0.6]}>
      <meshStandardMaterial
        color={highlight ? '#fbbf24' : node.color}
        emissive={highlight ? '#fbbf24' : node.color}
        emissiveIntensity={highlight ? 0.5 : 0.1}
        metalness={0.3}
        roughness={0.4}
      />
    </Box>
  );
}

/**
 * Connection line between nodes
 */
function TreeConnection({ from, to }: { from: [number, number, number]; to: [number, number, number] }) {
  const points = [new THREE.Vector3(...from), new THREE.Vector3(...to)];
  return <Line points={points} color="#60a5fa" lineWidth={2} />;
}

/**
 * Screen reader path highlight
 */
function ScreenReaderPath({ nodes, currentIndex }: { nodes: TreeNode[]; currentIndex: number }) {
  if (currentIndex < 1) return null;

  const points = nodes.slice(0, currentIndex + 1).map(node => new THREE.Vector3(...node.position));

  return (
    <Line
      points={points}
      color="#10b981"
      lineWidth={4}
      dashed
      dashSize={0.1}
      gapSize={0.05}
    />
  );
}

/**
 * Complete accessibility tree structure
 */
function TreeStructure({ highlightIndex }: { highlightIndex: number }) {
  const treeData: TreeNode = {
    id: 'root',
    label: 'Document',
    role: 'document',
    position: [0, 3, 0],
    color: '#3b82f6',
    children: [
      {
        id: 'header',
        label: 'Header',
        role: 'banner',
        position: [-2, 1.5, 0],
        color: '#8b5cf6'
      },
      {
        id: 'main',
        label: 'Main Content',
        role: 'main',
        position: [0, 1.5, 0],
        color: '#10b981',
        children: [
          {
            id: 'article',
            label: 'Article',
            role: 'article',
            position: [0, 0, 0],
            color: '#06b6d4'
          },
          {
            id: 'aside',
            label: 'Sidebar',
            role: 'complementary',
            position: [2, 0, 0],
            color: '#f59e0b'
          }
        ]
      },
      {
        id: 'footer',
        label: 'Footer',
        role: 'contentinfo',
        position: [0, -1.5, 0],
        color: '#ec4899'
      }
    ]
  };

  // Flatten tree for path visualization
  const flatNodes: TreeNode[] = [];
  const traverse = (node: TreeNode) => {
    flatNodes.push(node);
    node.children?.forEach(traverse);
  };
  traverse(treeData);

  return (
    <>
      {/* Root node */}
      <AccessibilityNode node={treeData} highlight={highlightIndex === 0} />

      {/* Child nodes and connections */}
      {treeData.children?.map((child, idx) => (
        <group key={child.id}>
          <AccessibilityNode node={child} highlight={highlightIndex === idx + 1} />
          <TreeConnection from={treeData.position} to={child.position} />

          {/* Grandchildren */}
          {child.children?.map((grandchild, gidx) => (
            <group key={grandchild.id}>
              <AccessibilityNode
                node={grandchild}
                highlight={highlightIndex === idx + 1 + child.children!.length + gidx}
              />
              <TreeConnection from={child.position} to={grandchild.position} />
            </group>
          ))}
        </group>
      ))}

      {/* Screen reader path */}
      <ScreenReaderPath nodes={flatNodes} currentIndex={highlightIndex} />
    </>
  );
}

/**
 * Main scene content
 */
const SceneContent = memo(function SceneContent({ highlightIndex }: { highlightIndex: number }) {
  return (
    <>
      <ambientLight intensity={0.6} />
      <pointLight position={[10, 10, 10]} intensity={0.8} />
      <spotLight position={[-10, 10, 5]} angle={0.3} penumbra={1} intensity={0.5} />

      <TreeStructure highlightIndex={highlightIndex} />

      <OrbitControls
        enableZoom={true}
        enablePan={false}
        maxPolarAngle={Math.PI / 1.5}
        minPolarAngle={Math.PI / 4}
        autoRotate={false}
      />
    </>
  );
});

/**
 * Fallback content
 */
function FallbackContent() {
  return (
    <div className="flex h-full w-full items-center justify-center bg-gradient-to-br from-blue-50 to-green-50 dark:from-blue-950 dark:to-green-950">
      <div className="text-center px-4">
        <div className="text-6xl mb-4">â™¿</div>
        <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-4">
          Accessibility Tree
        </h3>
        <div className="space-y-2 text-left max-w-md">
          <div className="bg-blue-100 dark:bg-blue-900/30 p-3 rounded">
            <span className="font-semibold">Document:</span> Root ARIA landmark
          </div>
          <div className="bg-purple-100 dark:bg-purple-900/30 p-3 rounded">
            <span className="font-semibold">Banner:</span> Header region
          </div>
          <div className="bg-green-100 dark:bg-green-900/30 p-3 rounded">
            <span className="font-semibold">Main:</span> Primary content area
          </div>
          <div className="bg-pink-100 dark:bg-pink-900/30 p-3 rounded">
            <span className="font-semibold">Contentinfo:</span> Footer region
          </div>
        </div>
      </div>
    </div>
  );
}

/**
 * AccessibilityTree: DOM tree with ARIA labels visualization
 *
 * Features:
 * - Interactive tree structure
 * - Screen reader path highlighting
 * - ARIA landmark roles
 * - Keyboard navigation demonstration
 */
export default function AccessibilityTree() {
  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.1,
    rootMargin: '200px'
  });

  const [hasWebGL, setHasWebGL] = useState(true);
  const [isLoaded, setIsLoaded] = useState(false);
  const [highlightIndex, setHighlightIndex] = useState(0);

  useEffect(() => {
    const canvas = document.createElement('canvas');
    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    setHasWebGL(!!gl);
    setIsLoaded(true);
  }, []);

  // Simulate screen reader progression
  useEffect(() => {
    if (!inView || !hasWebGL) return;

    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    if (prefersReducedMotion) return;

    const interval = setInterval(() => {
      setHighlightIndex(prev => (prev + 1) % 7);
    }, 1500);

    return () => clearInterval(interval);
  }, [inView, hasWebGL]);

  if (!isLoaded) {
    return (
      <div ref={ref} className="w-full h-[400px] rounded-lg overflow-hidden flex items-center justify-center bg-gray-50 dark:bg-gray-800">
        <div className="animate-pulse text-gray-500">Loading...</div>
      </div>
    );
  }

  if (!hasWebGL) {
    return (
      <div ref={ref} className="w-full h-[400px] rounded-lg overflow-hidden">
        <FallbackContent />
      </div>
    );
  }

  return (
    <div ref={ref} className="w-full h-[400px] rounded-lg overflow-hidden">
      {inView && (
        <Canvas
          camera={{ position: [0, 2, 8], fov: 50 }}
          gl={{ antialias: true, alpha: true, powerPreference: 'high-performance' }}
          dpr={Math.min(window.devicePixelRatio, 2)}
        >
          <color attach="background" args={['#0f172a']} />
          <fog attach="fog" args={['#0f172a', 8, 15]} />
          <SceneContent highlightIndex={highlightIndex} />
        </Canvas>
      )}
    </div>
  );
}
